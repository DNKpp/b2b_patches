diff --git a/scripts/eastern_kingdoms/blackwing_lair/blackwing_lair.h b/scripts/eastern_kingdoms/blackwing_lair/blackwing_lair.h
index b98841f..8199999 100644
--- a/scripts/eastern_kingdoms/blackwing_lair/blackwing_lair.h
+++ b/scripts/eastern_kingdoms/blackwing_lair/blackwing_lair.h
@@ -19,6 +19,9 @@ enum
     TYPE_NEFARIAN               = 7,
 
     NPC_RAZORGORE               = 12435,
+    NPC_GRETHOK                 = 12557,
+    NPC_BLACKWING_GUARDSMAN     = 14456,
+    NPC_ORB_TRIGGER             = 14449,
     NPC_VAELASTRASZ             = 13020,
     NPC_LASHLAYER               = 12017,
     NPC_FIREMAW                 = 11983,
@@ -65,6 +68,7 @@ class MANGOS_DLL_DECL instance_blackwing_lair : public ScriptedInstance
         uint32 m_auiEncounter[MAX_ENCOUNTER];
 
         GUIDList m_lTechnicianGuids;
+        GUIDList m_lGuardsmanGuids;
 };
 
 #endif
diff --git a/scripts/eastern_kingdoms/blackwing_lair/boss_razorgore.cpp b/scripts/eastern_kingdoms/blackwing_lair/boss_razorgore.cpp
index a7b0f74..a8ac7c1 100644
--- a/scripts/eastern_kingdoms/blackwing_lair/boss_razorgore.cpp
+++ b/scripts/eastern_kingdoms/blackwing_lair/boss_razorgore.cpp
@@ -16,13 +16,14 @@
 
 /* ScriptData
 SDName: Boss_Razorgore
-SD%Complete: 50
-SDComment: Needs additional review. Phase 1 NYI (Grethok the Controller), Conflagration needs core support
+SD%Complete: 90
+SDComment: some styl issues
 SDCategory: Blackwing Lair
 EndScriptData */
 
 #include "precompiled.h"
 #include "blackwing_lair.h"
+#include "TemporarySummonGO.h"
 
 // Razorgore Phase 2 Script
 enum
@@ -38,13 +39,401 @@ enum
     SPELL_WARSTOMP              = 24375,
     SPELL_FIREBALL_VOLLEY       = 22425,
     SPELL_CONFLAGRATION         = 23023,
+
+    SPELL_MIND_EXHAUSTION       = 23958,
+    SPELL_POSSES                = 23014,
+    SPELL_DRAGON_ORB            = 19869,
+    SPELL_DESTROY_EGG           = 19873,
+    SPELL_FIREBALL              = 23024,
+    SPELL_WARMING_FLAMES        = 23040,
+
+    MAX_DRAGONKINS              = 12,
+    MAX_ORKS                    = 40,
+    MAX_EGGS                    = 30,
+
+    NPC_DEATH_TALON_DRAGONSPAWN = 12422,            // dragonkin
+    NPC_BLACKWING_LEGIONNAIRE   = 12416,            // orc
+    NPC_BLACKWING_MAGE          = 12420,            // orc
+};
+
+#define SAY_PHASE_FIGHT "I'm free! That device shall never torment me again!"
+
+
+enum Phases
+{
+    PHASE_NONE,
+    PHASE_ONE,
+    PHASE_FIGHT,
+    PHASE_DONE,
 };
 
+struct sSpawnLocation
+{
+    float m_fX, m_fY, m_fZ;
+};
+
+struct sSpawnLocation aEggSpawnLocs[MAX_EGGS] =
+{
+    { -7596.41f, -1001.11f, 408.491f },
+    { -7596.41f, -1001.11f, 408.491f },
+    { -7585.98f, -1022.83f, 408.491f },
+    { -7577.36f, -1035.26f, 408.491f },
+    { -7560.38f, -1057.63f, 408.491f },
+    { -7589.32f, -1051.47f, 408.158f },
+    { -7579.65f, -1050.32f, 408.158f },
+    { -7604.91f, -1059.74f, 408.158f },
+    { -7583.57f, -1075.18f, 408.491f },
+    { -7576.93f, -1085.41f, 413.382f },
+    { -7621.82f, -1061.06f, 408.491f},
+    { -7577.58f, -1090.8f,  413.382f },
+    { -7569.34f, -1079.7f,  413.382f },
+    { -7567.53f, -1087.96f, 413.382f },
+    { -7568.46f, -1094.13f, 413.382f },
+    { -7579.51f, -1066.71f, 408.49f  },
+    { -7542.58f, -1068.73f, 408.491f },
+    { -7596.04f, -1094.38f, 408.491f },
+    { -7611.5f,  -1022.25f, 413.382f },
+    { -7587.81f, -1036.5f,  408.157f },
+    { -7599.08f, -1046.0f,  408.157f },
+    { -7600.33f, -1081.82f, 408.49f  },
+    { -7568.42f, -1059.21f, 408.49f  },
+    { -7594.38f, -1108.26f, 408.491f },
+    { -7610.73f, -1035.17f, 408.491f },
+    { -7639.49f, -1047.0f,  408.49f  },
+    { -7625.56f, -1043.2f,  408.49f  },
+    { -7620.48f, -1078.42f, 408.491f },
+    { -7626.59f, -1019.81f, 413.381f },
+    { -7622.5f,  -1009.51f, 413.381f }
+};
+
+// Add Spawn Positions
+struct sSpawnLocation aSpawnLocs[8] =
+{
+    // east (north to south)
+    { -7608.409f, -1116.690f, 407.199f },
+    { -7622.761f, -1094.909f, 407.205f },
+    { -7643.701f, -1064.859f, 407.204f },
+    { -7658.567f, -1043.317f, 407.199f },
+    // west (north to south)
+    { -7532.629f, -1064.694f, 407.198f },
+    { -7548.185f, -1041.537f, 407.205f },
+    { -7563.438f, -1012.763f, 407.205f },
+    { -7583.950f,  -991.112f, 407.199f }
+};
+
+const sSpawnLocation aAddCombatStartPosition = { -7554.54f, -1024.50f, 408.49f };
+
+/*######
+## mob_blackwing_orb_trigger
+######*/
+struct MANGOS_DLL_DECL mob_blackwing_orb_triggerAI : public Scripted_NoMovementAI
+{
+    mob_blackwing_orb_triggerAI(Creature* pCreature) : Scripted_NoMovementAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        if (!m_creature->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE))
+            m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+        if (!m_creature->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE))
+            m_creature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+        Reset();
+
+        if (m_pInstance && m_pInstance->GetData(TYPE_RAZORGORE) != DONE)
+        {
+            SpawnEggs();
+            m_pInstance->SetData(TYPE_RAZORGORE, FAIL);
+        }
+    }
+    
+    ScriptedInstance* m_pInstance;
+
+    uint32 m_uiAddSummonTimer;
+    uint32 m_uiEggCounter;
+    Phases m_Phase;
+
+    bool m_bIsCharmed;
+
+    std::list<ObjectGuid> m_uiDragonkinGUIDs;
+    std::list<ObjectGuid> m_uiOrkGUIDs;
+    std::list<ObjectGuid> m_uiDragonEggGUIDs;
+
+    void Reset()
+    {
+        m_bIsCharmed            = false;
+        m_uiEggCounter          = 0;
+
+        if (m_pInstance && m_pInstance->GetData(TYPE_RAZORGORE) != DONE)
+            m_Phase = PHASE_NONE;
+        else
+            m_Phase = PHASE_DONE;
+
+        m_uiAddSummonTimer      = 40000;
+        UnsummonAdds();
+        RespawnAllEggs();
+    }
+
+    // add destroyed egg counter, if greater MAX_EGGS switch phase and heal razorgore to full
+    void DestroyEgg()
+    {
+        m_uiEggCounter++;
+        if (m_uiEggCounter == 1)
+        {
+            if (Creature *pRazorgore = m_pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE))
+                pRazorgore->MonsterYell(SAY_EGGS_BROKEN_1, 0);
+        }
+        else if (m_uiEggCounter == 12)
+        {
+            if (Creature *pRazorgore = m_pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE))
+                pRazorgore->MonsterYell(SAY_EGGS_BROKEN_2, 0);
+        }
+        else if (m_uiEggCounter == 25)
+        {
+            if (Creature *pRazorgore = m_pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE))
+                pRazorgore->MonsterYell(SAY_EGGS_BROKEN_3, 0);
+        }
+        else if (m_uiEggCounter >= 3)
+        {
+            m_Phase = PHASE_FIGHT;
+            if (Creature *pRazorgore = m_pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE))
+            {
+                pRazorgore->MonsterYell(SAY_PHASE_FIGHT, 0);
+                pRazorgore->RemoveAllAuras();                                                       // remove mind controle from razorgore
+                pRazorgore->CastSpell(pRazorgore, SPELL_WARMING_FLAMES, true);
+            }
+            AddsMoveToDespawn();
+        }
+    }
+
+    void SetAddToDespawn(Creature *pCreature)
+    {
+        pCreature->SetSpeedRate(MOVE_WALK, 4);
+        pCreature->SetSummonPoint(CreatureCreatePos(pCreature->GetMap(), aAddCombatStartPosition.m_fX, aAddCombatStartPosition.m_fY, aAddCombatStartPosition.m_fZ, 0) );
+        pCreature->DeleteThreatList();
+        if (!pCreature->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE))
+            pCreature->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+    }
+
+    void AddsMoveToDespawn()
+    {
+        bool bAddYelled = false;
+        for (std::list<ObjectGuid>::iterator itr = m_uiDragonkinGUIDs.begin(); itr != m_uiDragonkinGUIDs.end(); ++itr)
+        {
+            if (Creature *pCreature = m_creature->GetMap()->GetCreature(*itr))
+            {
+                if (!bAddYelled)
+                {
+                    pCreature->MonsterTextEmote(EMOTE_TROOPS_FLEE, 0);
+                    bAddYelled = true;
+                }
+                SetAddToDespawn(pCreature);
+            }
+        }
+
+        for (std::list<ObjectGuid>::iterator itr = m_uiOrkGUIDs.begin(); itr != m_uiOrkGUIDs.end(); ++itr)
+        {
+            if (Creature *pCreature = m_creature->GetMap()->GetCreature(*itr))
+                SetAddToDespawn(pCreature);
+        }
+    }
+
+    // if all adds at current waypoint set to next WP
+    void CheckAddMovement()
+    {
+        for (std::list<ObjectGuid>::iterator itr = m_uiDragonkinGUIDs.begin(); itr != m_uiDragonkinGUIDs.end(); ++itr)
+        {
+            if (Creature *pCreature = m_creature->GetMap()->GetCreature(*itr))
+            {
+                if (pCreature->GetDistance(aAddCombatStartPosition.m_fX, aAddCombatStartPosition.m_fY, aAddCombatStartPosition.m_fZ) < 3)
+                    pCreature->RemoveFromWorld();
+            }
+        }
+
+        for (std::list<ObjectGuid>::iterator itr = m_uiOrkGUIDs.begin(); itr != m_uiOrkGUIDs.end(); ++itr)
+        {
+            if (Creature *pCreature = m_creature->GetMap()->GetCreature(*itr))
+            {
+                if (pCreature->GetDistance(aAddCombatStartPosition.m_fX, aAddCombatStartPosition.m_fY, aAddCombatStartPosition.m_fZ) < 3)
+                    pCreature->RemoveFromWorld();
+            }
+        }
+    }
+
+    void AttackNearestTarget(Creature* pCreature)
+    {
+        float minRange = VISIBLE_RANGE;
+        float range;
+        Player* target = NULL;
+
+        Map::PlayerList const& players = m_creature->GetMap()->GetPlayers();
+        for(Map::PlayerList::const_iterator itr = players.begin(); itr != players.end(); ++itr)
+        {
+            if (Player* i_pl = itr->getSource())
+            {
+                if (i_pl->isTargetableForAttack())
+                {
+                    range = i_pl->GetDistance(pCreature);
+                    if (range < minRange)
+                    {
+                        minRange = range;
+                        target = i_pl;
+                    }
+                }
+            }
+        }
+
+        if (!target)
+            return;
+
+        pCreature->AI()->AttackStart(target);
+    }
+
+
+    // first spawn of eggs
+    void SpawnEggs()
+    {
+        for(uint32 i = 0; i < MAX_EGGS; i++)
+            m_uiDragonEggGUIDs.push_back(m_creature->SummonGameObject(177807, aEggSpawnLocs[i].m_fX, aEggSpawnLocs[i].m_fY, aEggSpawnLocs[i].m_fZ, urand(0, M_PI_F * 2), TEMPSUMMON_MANUAL_DESPAWN)->GetObjectGuid());
+    }
+
+    // the respawn of eggs
+    void RespawnAllEggs()
+    {
+        uint32 i = 0;
+        for (std::list<ObjectGuid>::iterator itr = m_uiDragonEggGUIDs.begin(); itr != m_uiDragonEggGUIDs.end(); ++itr)
+        {
+            GameObject *pGo = m_creature->GetMap()->GetGameObject(*itr);
+            if (!pGo)
+                *itr = m_creature->SummonGameObject(177807, aEggSpawnLocs[i].m_fX, aEggSpawnLocs[i].m_fY, aEggSpawnLocs[i].m_fZ, urand(0, M_PI_F * 2), TEMPSUMMON_MANUAL_DESPAWN)->GetObjectGuid();
+            i++;
+        }
+    }
+
+    // unsummon all adds and delete GUID lists
+    void UnsummonAdds()
+    {
+        for (std::list<ObjectGuid>::iterator itr = m_uiDragonkinGUIDs.begin(); itr != m_uiDragonkinGUIDs.end(); ++itr)
+        {
+            if (Creature *pCreature = m_creature->GetMap()->GetCreature(*itr))
+                m_creature->ForcedDespawn();
+        }
+
+        for (std::list<ObjectGuid>::iterator itr = m_uiOrkGUIDs.begin(); itr != m_uiOrkGUIDs.end(); ++itr)
+        {
+            if (Creature *pCreature = m_creature->GetMap()->GetCreature(*itr))
+                m_creature->ForcedDespawn();
+        }
+        m_uiDragonkinGUIDs.clear();
+        m_uiOrkGUIDs.clear();
+    }
+
+    void SummonedCreatureDespawn(Creature *pCreature)
+    {
+        if (pCreature->GetEntry() == NPC_DEATH_TALON_DRAGONSPAWN)
+            m_uiDragonkinGUIDs.remove(pCreature->GetObjectGuid());
+        else if (pCreature->GetEntry() == NPC_BLACKWING_LEGIONNAIRE || pCreature->GetEntry() == NPC_BLACKWING_MAGE)
+            m_uiOrkGUIDs.remove(pCreature->GetObjectGuid());
+    }
+
+    void JustExceededSpawnDelay(Creature *pCreature)
+    {
+        if (!pCreature)
+            return;
+
+        // attack current orb user, if no user, attack nearest target
+        Creature *pRazorgore = m_pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE);
+        if (pRazorgore && pRazorgore->isCharmed())
+        {
+            if (Unit *pUnit = pRazorgore->GetCharmerOrOwner())
+            {
+                pCreature->AddThreat(pUnit, 4000);
+                pCreature->AI()->AttackStart(pUnit);
+            }
+        }
+        else
+            AttackNearestTarget(pCreature);
+    }
+
+    void Aggro (Unit *who) {}
+
+    void MoveInLineOfSight(Unit* who) {}
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (!m_pInstance || m_pInstance->GetData(TYPE_RAZORGORE) == DONE)
+            return;
+
+        Creature* pRazorgore = m_pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE);
+        if (!pRazorgore)
+            return;
+
+        // casts blue beam from trigger to razorgore
+        if (!pRazorgore->HasAura(SPELL_POSSES) && m_Phase != PHASE_FIGHT && m_Phase != PHASE_DONE)
+            m_creature->CastSpell(pRazorgore, SPELL_POSSES, true);
+
+        if (m_Phase == PHASE_NONE || m_Phase == PHASE_DONE)
+            return;
+        // no adds spawn during fight phase
+        else if (m_Phase == PHASE_FIGHT)
+        {
+            // if GUID lists are empty, return;
+            if (m_uiDragonkinGUIDs.empty() && m_uiOrkGUIDs.empty())
+                return;
+
+            CheckAddMovement();
+            return;
+        }
+
+        // summon adds in all 8 rooms
+        if (m_uiAddSummonTimer <= uiDiff)
+        {
+            for (uint8 i = 0; i < 8; i++)
+            {
+                Creature *pCreature = NULL;
+                if (urand(0, 1) && m_uiDragonkinGUIDs.size() < MAX_DRAGONKINS)
+                {
+                    pCreature = m_creature->SummonCreature(NPC_DEATH_TALON_DRAGONSPAWN, aSpawnLocs[i].m_fX, aSpawnLocs[i].m_fY, aSpawnLocs[i].m_fZ, 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 50000);
+
+                    if (pCreature)
+                        m_uiDragonkinGUIDs.push_back(pCreature->GetObjectGuid());
+                }
+                else
+                {
+                    if (m_uiOrkGUIDs.size() < MAX_ORKS)
+                    {
+                        if (urand(0, 1))
+                            pCreature = m_creature->SummonCreature(NPC_BLACKWING_LEGIONNAIRE, aSpawnLocs[i].m_fX, aSpawnLocs[i].m_fY, aSpawnLocs[i].m_fZ, 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 50000);
+                        else
+                            pCreature = m_creature->SummonCreature(NPC_BLACKWING_MAGE, aSpawnLocs[i].m_fX, aSpawnLocs[i].m_fY, aSpawnLocs[i].m_fZ, 0, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 50000);
+
+                        if (pCreature)
+                            m_uiOrkGUIDs.push_back(pCreature->GetObjectGuid());
+                    }
+                }
+            }
+            m_uiAddSummonTimer = 15000;
+        }
+        else
+            m_uiAddSummonTimer -= uiDiff;
+    }
+};
+
+CreatureAI* GetAI_mob_blackwing_orb_trigger(Creature* pCreature)
+{
+    return new mob_blackwing_orb_triggerAI(pCreature);
+}
+
+/*######
+## boss_razorgore
+######*/
+
 struct MANGOS_DLL_DECL boss_razorgoreAI : public ScriptedAI
 {
     boss_razorgoreAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
         m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        // should cast spell on all targets in area
+        SpellEntry* TempSpell = (SpellEntry*)GetSpellStore()->LookupEntry(SPELL_FIREBALL);
+        TempSpell->EffectImplicitTargetA[0] = TARGET_ALL_ENEMY_IN_AREA;
+        TempSpell->EffectImplicitTargetA[1] = TARGET_NONE;
         Reset();
     }
 
@@ -57,32 +446,53 @@ struct MANGOS_DLL_DECL boss_razorgoreAI : public ScriptedAI
 
     void Reset()
     {
-        m_uiCleaveTimer         = 15000;                       // These times are probably wrong
+        m_uiCleaveTimer         = 15000;
         m_uiWarStompTimer       = 35000;
         m_uiConflagrationTimer  = 12000;
         m_uiFireballVolleyTimer = 7000;
 
     }
 
-    void Aggro(Unit* pWho)
-    {
-        // TODO Temporarily add this InstData setting, must be started with Phase 1 which is not yet implemented
-        if (m_pInstance)
-            m_pInstance->SetData(TYPE_RAZORGORE, IN_PROGRESS);
-    }
-
     void JustDied(Unit* pKiller)
     {
+        // if phase = PHASE_ONE kill all enemy targets and respawn
+        if (Creature* pTrigger = m_pInstance->GetSingleCreatureFromStorage(NPC_ORB_TRIGGER))
+        {
+            if (mob_blackwing_orb_triggerAI *pTriggerAI = (mob_blackwing_orb_triggerAI*)pTrigger->AI())
+            {
+                if (pTriggerAI->m_Phase == PHASE_ONE)
+                {
+                    m_creature->MonsterYell(SAY_DEATH, 0);
+                    m_creature->CastSpell(m_creature, SPELL_FIREBALL, true);
+                    m_creature->Respawn();
+                    pTriggerAI->Reset();
+                    if (m_pInstance)
+                        m_pInstance->SetData(TYPE_RAZORGORE, FAIL);
+                    return;
+                }
+            }
+        }
+
+        // if killed in phase PHASE_FIGHT, fight ends, and event is done
         if (m_pInstance)
             m_pInstance->SetData(TYPE_RAZORGORE, DONE);
 
-        DoScriptText(SAY_DEATH, m_creature);
+        if (Creature* pOrbTrigger = m_pInstance->GetSingleCreatureFromStorage(NPC_ORB_TRIGGER))
+        {
+            if (mob_blackwing_orb_triggerAI *pOrbTriggerAI = (mob_blackwing_orb_triggerAI*)pOrbTrigger->AI())
+                pOrbTriggerAI->m_Phase = PHASE_DONE;
+        }
     }
 
     void JustReachedHome()
     {
         if (m_pInstance)
+        {
             m_pInstance->SetData(TYPE_RAZORGORE, FAIL);
+            if (Creature *pOrbTrigger = m_pInstance->GetSingleCreatureFromStorage(NPC_ORB_TRIGGER))
+                if (mob_blackwing_orb_triggerAI *pTriggerAI = (mob_blackwing_orb_triggerAI*)pOrbTrigger->AI())
+                    pTriggerAI->Reset();
+        }
     }
 
     void UpdateAI(const uint32 uiDiff)
@@ -90,6 +500,10 @@ struct MANGOS_DLL_DECL boss_razorgoreAI : public ScriptedAI
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
+        if (Creature *pOrbTrigger = m_pInstance->GetSingleCreatureFromStorage(NPC_ORB_TRIGGER))
+            if (mob_blackwing_orb_triggerAI *pTriggerAI = (mob_blackwing_orb_triggerAI*)pOrbTrigger->AI())
+                pTriggerAI->m_bIsCharmed = false;
+
         // Cleave
         if (m_uiCleaveTimer < uiDiff)
         {
@@ -121,7 +535,7 @@ struct MANGOS_DLL_DECL boss_razorgoreAI : public ScriptedAI
         if (m_uiConflagrationTimer < uiDiff)
         {
             if (DoCastSpellIfCan(m_creature, SPELL_CONFLAGRATION) == CAST_OK)
-                m_uiConflagrationTimer = 12000;
+                m_uiConflagrationTimer = urand(12000, 24000);
         }
         else
             m_uiConflagrationTimer -= uiDiff;
@@ -144,12 +558,188 @@ CreatureAI* GetAI_boss_razorgore(Creature* pCreature)
     return new boss_razorgoreAI(pCreature);
 }
 
-void AddSC_boss_razorgore()
+/*######
+## npc grethok the controller
+######*/
+
+enum
 {
+    SPELL_ARCANE_MISSILES       = 22273,
+    SPELL_SLOW                  = 13747,
+    SPELL_GREATER_POLYMORPH     = 22274,
+    SPELL_DOMINATE_MIND         = 14515,
+};
+
+struct MANGOS_DLL_DECL npc_grethokAI : public ScriptedAI
+{
+    npc_grethokAI(Creature* pCreature) : ScriptedAI(pCreature)
+    {
+        m_pInstance = (ScriptedInstance*)pCreature->GetInstanceData();
+        Reset();
+    }
+
+    ScriptedInstance *m_pInstance;
+
+    // timer
+    uint32 m_uiArcaneMissilesTimer;
+    uint32 m_uiSlowTimer;
+    uint32 m_uiGreaterPolymprphTimer;
+    uint32 m_uiDominateMindTimer;
+
+    void Reset()
+    {
+        m_uiArcaneMissilesTimer     = 0;
+        m_uiSlowTimer               = urand(15000, 21000);
+        m_uiGreaterPolymprphTimer   = urand(8000, 11000);
+        m_uiDominateMindTimer       = urand(11000, 14000);
+    }
+
+    void Aggro(Unit *pWho)
+    {
+        if (m_pInstance && m_pInstance->GetData(TYPE_RAZORGORE) != IN_PROGRESS)
+            m_pInstance->SetData(TYPE_RAZORGORE, IN_PROGRESS);
+
+        // set phase to PHASE_ONE to start summon timer
+        if (Creature* pOrbTrigger = m_pInstance->GetSingleCreatureFromStorage(NPC_ORB_TRIGGER))
+        {
+            if (mob_blackwing_orb_triggerAI *pOrbTriggerAI = (mob_blackwing_orb_triggerAI*)pOrbTrigger->AI())
+                pOrbTriggerAI->m_Phase = PHASE_ONE;
+        }
+
+        // when gets aggro, pull Razorgore
+        if (Creature* pRazorgore = m_pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE))
+        {
+            if (pRazorgore->isAlive())
+                pRazorgore->SetInCombatWithZone();
+        }
+
+        m_creature->CallForHelp(10.0f);
+    }
+
+    void UpdateAI(const uint32 uiDiff)
+    {
+        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+            return;
+
+        // cast Arcane Missiles
+        if (m_uiArcaneMissilesTimer < uiDiff)
+        {
+            if (DoCastSpellIfCan(m_creature->getVictim(), SPELL_ARCANE_MISSILES) == CAST_OK)
+                m_uiArcaneMissilesTimer = urand(5000, 8000);
+        }
+        else
+            m_uiArcaneMissilesTimer -= uiDiff;
+
+        // cast Slow
+        if (m_uiArcaneMissilesTimer < uiDiff)
+        {
+            if (DoCastSpellIfCan(m_creature->getVictim(), SPELL_SLOW) == CAST_OK)
+                m_uiArcaneMissilesTimer = urand(10000, 17000);
+        }
+        else
+            m_uiArcaneMissilesTimer -= uiDiff;
+
+        // cast Greater Polymorph
+        if (m_uiArcaneMissilesTimer < uiDiff)
+        {
+            if (DoCastSpellIfCan(m_creature->getVictim(), SPELL_GREATER_POLYMORPH) == CAST_OK)
+                m_uiArcaneMissilesTimer = urand(20000, 24000);
+        }
+        else
+            m_uiArcaneMissilesTimer -= uiDiff;
+
+        // cast Dominate Mind
+        if (m_uiArcaneMissilesTimer < uiDiff)
+        {
+            if (DoCastSpellIfCan(m_creature->getVictim(), SPELL_DOMINATE_MIND) == CAST_OK)
+                m_uiArcaneMissilesTimer = urand(16000, 20000);
+        }
+        else
+            m_uiArcaneMissilesTimer -= uiDiff;
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+CreatureAI* GetAI_npc_grethok(Creature* pCreature)
+{
+    return new npc_grethokAI(pCreature);
+}
+
+/*######
+## go_orb_of_domintaion
+######*/
+bool GOUse_go_orb_of_domintaion(Player* pPlayer, GameObject* pGo)
+{
+    if (ScriptedInstance* pInstance = (ScriptedInstance*)pGo->GetInstanceData())
+    {
+        Creature *pTrigger = pInstance->GetSingleCreatureFromStorage(NPC_ORB_TRIGGER);
+        if (!pTrigger || !pPlayer || pPlayer->HasAura(SPELL_MIND_EXHAUSTION))
+            return true;
+
+        // if razorgore is already charmed
+        mob_blackwing_orb_triggerAI *pTriggerAI = (mob_blackwing_orb_triggerAI*)pTrigger->AI();
+        Creature *pCreature = pInstance->GetSingleCreatureFromStorage(NPC_RAZORGORE);
+        if (!pCreature || pCreature->isCharmed() || !pTriggerAI || pTriggerAI->m_Phase == PHASE_FIGHT || pTriggerAI->m_Phase == PHASE_DONE)
+            return true;
+
+        pCreature->AddThreat(pPlayer, 50000);
+        pTriggerAI->m_bIsCharmed = true;
+        pPlayer->CastSpell(pCreature, SPELL_DRAGON_ORB, true);
+    }
+   else
+        return true;
+
+    return false;
+}
+
+/*######
+## go_dark_dragon_egg
+######*/
+bool GOUse_go_dark_dragon_egg(Player* pPlayer, GameObject* pGo)
+{
+   if (ScriptedInstance* pInstance = (ScriptedInstance*)pGo->GetInstanceData())
+    {
+        Creature *pTrigger = pInstance->GetSingleCreatureFromStorage(NPC_ORB_TRIGGER);
+        if (!pTrigger)
+            return true;
+
+        if (mob_blackwing_orb_triggerAI *pTriggerAI = (mob_blackwing_orb_triggerAI*)pTrigger->AI())
+            pTriggerAI->DestroyEgg();
+
+        TemporarySummonGO *pTemp = (TemporarySummonGO*)pGo;
+        if (pTemp)
+            pTemp->UnSummon();
+    }
+    return false;
+}
+
+void AddSC_boss_razorgore()
+ {
     Script* pNewScript;
 
     pNewScript = new Script;
     pNewScript->Name = "boss_razorgore";
     pNewScript->GetAI = &GetAI_boss_razorgore;
     pNewScript->RegisterSelf();
-}
+
+    pNewScript = new Script;
+    pNewScript->Name = "mob_blackwing_orb_trigger";
+    pNewScript->GetAI = &GetAI_mob_blackwing_orb_trigger;
+    pNewScript->RegisterSelf();
+
+    pNewScript = new Script;
+    pNewScript->Name = "npc_grethok";
+    pNewScript->GetAI = &GetAI_npc_grethok;
+    pNewScript->RegisterSelf();
+
+    pNewScript = new Script;
+    pNewScript->Name = "go_orb_of_domintaion";
+    pNewScript->pGOUse = &GOUse_go_orb_of_domintaion;
+    pNewScript->RegisterSelf();
+
+    pNewScript = new Script;
+    pNewScript->Name = "go_dark_dragon_egg";
+    pNewScript->pGOUse = &GOUse_go_dark_dragon_egg;
+    pNewScript->RegisterSelf();
+ }
diff --git a/scripts/eastern_kingdoms/blackwing_lair/instance_blackwing_lair.cpp b/scripts/eastern_kingdoms/blackwing_lair/instance_blackwing_lair.cpp
index 7493116..8c0021e 100644
--- a/scripts/eastern_kingdoms/blackwing_lair/instance_blackwing_lair.cpp
+++ b/scripts/eastern_kingdoms/blackwing_lair/instance_blackwing_lair.cpp
@@ -53,8 +53,14 @@ void instance_blackwing_lair::OnCreatureCreate(Creature* pCreature)
             if (pCreature->IsWithinDist2d(aNefariusSpawnLoc[0], aNefariusSpawnLoc[1], 50.0f))
                 m_lTechnicianGuids.push_back(pCreature->GetObjectGuid());
             break;
+        case NPC_BLACKWING_GUARDSMAN:
+            m_lGuardsmanGuids.push_back(pCreature->GetObjectGuid());
+            break;
         case NPC_VAELASTRASZ:
-            m_mNpcEntryGuidStore[NPC_VAELASTRASZ] = pCreature->GetObjectGuid();
+        case NPC_RAZORGORE:
+        case NPC_GRETHOK:
+        case NPC_ORB_TRIGGER:
+            m_mNpcEntryGuidStore[pCreature->GetEntry()] = pCreature->GetObjectGuid();
             break;
     }
 }
@@ -97,10 +103,25 @@ void instance_blackwing_lair::SetData(uint32 uiType, uint32 uiData)
     switch(uiType)
     {
         case TYPE_RAZORGORE:
-            m_auiEncounter[uiType] = uiData;
-            DoUseDoorOrButton(GO_DOOR_RAZORGORE_ENTER);
             if (uiData == DONE)
                 DoUseDoorOrButton(GO_DOOR_RAZORGORE_EXIT);
+            else if (uiData == FAIL)
+            {
+                // Respawn Grethok
+                if (Creature *pGrethok = GetSingleCreatureFromStorage(NPC_GRETHOK))
+                    if (pGrethok->isDead())
+                        pGrethok->Respawn();
+
+                // Respawn adds of Grethok
+                for (GUIDList::const_iterator itr = m_lGuardsmanGuids.begin(); itr != m_lGuardsmanGuids.end(); ++itr)
+                {
+                    if (Creature *pCreature = instance->GetCreature(*itr))
+                        if (pCreature->isDead())
+                            pCreature->Respawn();
+                }
+            }
+            m_auiEncounter[uiType] = uiData;
+            DoUseDoorOrButton(GO_DOOR_RAZORGORE_ENTER);
             break;
         case TYPE_VAELASTRASZ:
             m_auiEncounter[uiType] = uiData;
@@ -164,7 +185,7 @@ void instance_blackwing_lair::Load(const char* chrIn)
 
     for(uint8 i = 0; i < MAX_ENCOUNTER; ++i)
     {
-        if (m_auiEncounter[i] == IN_PROGRESS)
+        if (m_auiEncounter[i] == IN_PROGRESS || m_auiEncounter[i] == FAIL)
             m_auiEncounter[i] = NOT_STARTED;
     }

diff --git a/scripts/eastern_kingdoms/molten_core/ragnaros.sql b/scripts/eastern_kingdoms/molten_core/ragnaros.sql
new file mode 100644
--- /dev/null
+++ b/scripts/eastern_kingdoms/molten_core/razorgore.sql
@@ -0,0 +1,46 @@
+ -- Orb of Domination Template
+UPDATE `gameobject_template` SET  `data10` =  '0', `size` =  '2', `ScriptName` =  'go_orb_of_domintaion' WHERE  `gameobject_template`.`entry` =177808;
+
+ -- Grethok the Controller
+UPDATE `creature_template` SET  `ScriptName` =  'npc_grethok' WHERE  `creature_template`.`entry` =12557;
+
+ -- Razorgor Template
+UPDATE `creature_template` SET  `spell1` =  '22425', `spell2` =  '19872', `spell3` =  '19873', `spell4` =  '0' WHERE  `creature_template`.`entry` =12435;
+
+ -- Black Dragon Egg Template
+UPDATE `gameobject_template` SET  `type` =  '5', `size` =  '2', `data5` =  '0' WHERE  `gameobject_template`.`entry` =177807;
+
+ -- blackwing lair template
+UPDATE `instance_template` SET  `ScriptName` =  'instance_blackwing_lair' WHERE  `instance_template`.`map` =469;
+
+ -- blackwing orb trigger
+UPDATE `creature_template` SET  `ScriptName` =  'mob_blackwing_orb_trigger' WHERE  `creature_template`.`entry` =14449;
+INSERT INTO `creature` (`id`, `map`, `spawnMask`, `modelid`, `equipment_id`, `position_x`, `position_y`, `position_z`, `orientation`, `spawntimesecs`, `spawndist`, `currentwaypoint`, `curhealth`, `curmana`, `DeathState`, `MovementType`) VALUES (14449, 469, 1, 0, 0, -7617.23, -1022.97, 413.382, 5.37357, 25, 5, 0, 64, 0, 0, 0);
+
+
+ -- MC & Possesss & Destroy Eggs
+INSERT INTO `spell_script_target` (`entry` ,`type` ,`targetEntry`)VALUES ('23014', '1', '12435'), ('19832', '1', '12435'), ('19873', '0', '177807');
+
+ -- Doors:
+ -- razorgore doors template
+UPDATE `gameobject_template` SET  `flags` =  '4', `size` =  '2' WHERE  `gameobject_template`.`entry` =176964;
+UPDATE `gameobject_template` SET  `flags` =  '4', `size` =  '2' WHERE  `gameobject_template`.`entry` =176965;
+
+ -- Vaelastrasz Door
+UPDATE `gameobject_template` SET  `flags` =  '4', `size` =  '4' WHERE  `gameobject_template`.`entry` =179364;
+
+ -- Lashlayer Door
+UPDATE `gameobject_template` SET  `flags` =  '4', `size` =  '4' WHERE  `gameobject_template`.`entry` =179365;
+
+ -- Chromaggus Doors:
+ -- Chromaggus Gate
+UPDATE `gameobject_template` SET  `size` =  '4' WHERE  `gameobject_template`.`entry` =179115;
+
+ -- Side-Gate
+UPDATE `gameobject_template` SET  `flags` =  '4', `size` =  '4' WHERE  `gameobject_template`.`entry` =179116;
+
+ -- Gate to Nefarian
+UPDATE `gameobject_template` SET  `flags` =  '4', `size` =  '2' WHERE  `gameobject_template`.`entry` =179117;
+
+ -- Set respawn to 7 days
+UPDATE `creature` SET  `spawntimesecs` =  '36288000' WHERE  `creature`.`map` =469;

