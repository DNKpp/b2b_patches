diff --git a/scripts/eastern_kingdoms/molten_core/boss_ragnaros.cpp b/scripts/eastern_kingdoms/molten_core/boss_ragnaros.cpp
index a3a4faa..37c1f95 100644
--- a/scripts/eastern_kingdoms/molten_core/boss_ragnaros.cpp
+++ b/scripts/eastern_kingdoms/molten_core/boss_ragnaros.cpp
@@ -16,8 +16,8 @@
 
 /* ScriptData
 SDName: Boss_Ragnaros
-SD%Complete: 60
-SDComment: Intro Dialogue and event NYI, Melee/ Range Combat behavior is not correct, Some abilities are missing
+SD%Complete: 80
+SDComment: Some abilities are missing, melt weapon doesn´t work
 SDCategory: Molten Core
 EndScriptData */
 
@@ -41,6 +41,7 @@ EndScriptData */
 
 enum
 {
+    SAY_ARRIVAL5_RAG            = -1409012,
     SAY_REINFORCEMENTS_1        = -1409013,
     SAY_REINFORCEMENTS_2        = -1409014,
     SAY_HAMMER                  = -1409015,                 // TODO Hammer of Ragnaros
@@ -48,15 +49,19 @@ enum
     SAY_KILL                    = -1409017,
     SAY_MAGMABURST              = -1409018,
 
+    SPELL_ERUPTION              = 17731,                    // Spell might be not the right
+    SPELL_MIGHT_OF_RAGNAROS     = 19780,
     SPELL_WRATH_OF_RAGNAROS     = 20566,
     SPELL_ELEMENTAL_FIRE        = 20564,
     SPELL_MAGMA_BLAST           = 20565,                    // Ranged attack if nobody is in melee range
     SPELL_MELT_WEAPON           = 21388,                    // Passive aura
     SPELL_RAGNA_SUBMERGE        = 21107,                    // Stealth aura
     SPELL_RAGNA_EMERGE          = 20568,                    // Emerge from lava
+    SPELL_ELEMENTAL_FIRE_KILL   = 19773,
 
     MAX_ADDS_IN_SUBMERGE        = 8,
-    NPC_SON_OF_FLAME            = 12143
+    NPC_SON_OF_FLAME            = 12143,
+    NPC_ERUPTION_TRIGGER        = 13148,                    // cast SPELL_ERUPTION on them
 };
 
 struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
@@ -64,39 +69,143 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
     boss_ragnarosAI(Creature* pCreature) : Scripted_NoMovementAI(pCreature)
     {
         m_pInstance = (instance_molten_core*)pCreature->GetInstanceData();
+        m_uiEnterCombatTimer = 0;
+        m_bHasAggroYelled = false;
+        m_creature->SetPrefereMeleeTargets();
+        // player casts spell on it self (to low range), so targets musst be manipulated
+        SpellEntry* TempSpell = (SpellEntry*)GetSpellStore()->LookupEntry(SPELL_MIGHT_OF_RAGNAROS);
+        TempSpell->EffectImplicitTargetA[0] = TARGET_ALL_FRIENDLY_UNITS_AROUND_CASTER;
+        TempSpell->EffectImplicitTargetB[0] = TARGET_ALL_FRIENDLY_UNITS_AROUND_CASTER;
+        TempSpell->EffectImplicitTargetA[1] = TARGET_ALL_FRIENDLY_UNITS_AROUND_CASTER;
+        TempSpell->EffectImplicitTargetB[1] = TARGET_ALL_FRIENDLY_UNITS_AROUND_CASTER;
+        TempSpell->EffectImplicitTargetA[2] = TARGET_ALL_FRIENDLY_UNITS_AROUND_CASTER;
+        TempSpell->EffectImplicitTargetB[2] = TARGET_ALL_FRIENDLY_UNITS_AROUND_CASTER;
         Reset();
     }
 
     instance_molten_core* m_pInstance;
 
+    uint32 m_uiEnterCombatTimer;
+    uint32 m_uiEruptionTimer;
+    uint32 m_uiHammerTimer;
     uint32 m_uiWrathOfRagnarosTimer;
     uint32 m_uiMagmaBlastTimer;
     uint32 m_uiElementalFireTimer;
     uint32 m_uiSubmergeTimer;
     uint32 m_uiAttackTimer;
     uint32 m_uiAddCount;
+    uint32 m_uiAddFightStartTimer;
 
+    uint64 m_uiEruptionTrigger;
+
+    uint64 m_uiAdds[MAX_ADDS_IN_SUBMERGE];
+
+    bool m_bHasAggroYelled;
     bool m_bHasYelledMagmaBurst;
     bool m_bHasSubmergedOnce;
     bool m_bIsSubmerged;
+    bool m_bEruptionVisualSpawned;
+    bool m_bJustSpawnedAdds;
 
     void Reset()
     {
-        m_uiWrathOfRagnarosTimer = 30000;
+        m_uiWrathOfRagnarosTimer = 25000;
+        m_uiEruptionTimer = urand(5000, 15000);
+        m_uiHammerTimer = 11000;
         m_uiMagmaBlastTimer = 2000;
         m_uiElementalFireTimer = 3000;
         m_uiSubmergeTimer = 3*MINUTE*IN_MILLISECONDS;
         m_uiAttackTimer = 90*IN_MILLISECONDS;
         m_uiAddCount = 0;
+        m_uiAddFightStartTimer = 3000;
 
         m_bHasYelledMagmaBurst = false;
         m_bHasSubmergedOnce = false;
         m_bIsSubmerged = false;
+        m_bJustSpawnedAdds = false;
+
+        m_uiEruptionTrigger = NULL;
+    }
+
+    bool DoAutoAttack( const uint32 uiDiff )
+    {
+        if (ScriptedAI::DoMeleeAttackIfReady())
+        {
+           m_bHasYelledMagmaBurst = false;
+            return true;
+        }
+        else if (!m_creature->CanReachWithMeleeAttack(m_creature->getVictim()))
+           return DoCastSpellInsteadMeleeAttack( uiDiff );
+
+        return false;
+    }
+
+    void AttackNearestTarget(Creature* pCreature)
+    {
+        float minRange = VISIBLE_RANGE;
+        float range;
+        Player* target = NULL;
+
+        Map::PlayerList const& players = m_creature->GetMap()->GetPlayers();
+        for(Map::PlayerList::const_iterator itr = players.begin(); itr != players.end(); ++itr)
+        {
+            if (Player* i_pl = itr->getSource())
+            {
+                if (i_pl->isTargetableForAttack())
+                {
+                    range = i_pl->GetDistance(pCreature);
+                    if (range < minRange)
+                    {
+                        minRange = range;
+                        target = i_pl;
+                    }
+                }
+            }
+        }
+
+        if (!target)
+        {
+            debug_log("SD2: Molten_Core: AttackNearestTarget failed. No player.");
+            return;
+        }
+        pCreature->AI()->AttackStart(target);
+    }
+
+
+    bool DoCastSpellInsteadMeleeAttack( const uint32 uiDiff )
+    {
+        // Magma Burst Timer
+        if (m_uiMagmaBlastTimer < uiDiff)
+        {
+            if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
+            {
+                if (DoCastSpellIfCan(pTarget, SPELL_MAGMA_BLAST) == CAST_OK)
+                {
+                    if (!m_bHasYelledMagmaBurst)
+                    {
+                        DoScriptText(SAY_MAGMABURST, m_creature);
+                        m_bHasYelledMagmaBurst = true;
+                    }
+                    return true;
+                }
+            }
+        }
+        else
+            m_uiMagmaBlastTimer -= uiDiff;
+
+        return false;
     }
 
     void KilledUnit(Unit* pVictim)
     {
-        if (urand(0, 4))
+        // As Majordomo is now killed, the last timer (until attacking) must be handled with ragnaros script
+        if (pVictim->GetTypeId() == TYPEID_UNIT && pVictim->GetEntry() == NPC_MAJORDOMO)
+            m_uiEnterCombatTimer = 10000;
+
+        if (pVictim->GetTypeId() != TYPEID_PLAYER)
+            return;
+
+        if (urand(0, 3))
             return;
 
         DoScriptText(SAY_KILL, m_creature);
@@ -110,6 +219,9 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
 
     void Aggro(Unit* pWho)
     {
+        if (pWho->GetTypeId() == TYPEID_UNIT && pWho->GetEntry() == NPC_MAJORDOMO)
+            return;
+
         if (m_pInstance)
             m_pInstance->SetData(TYPE_RAGNAROS, IN_PROGRESS);
 
@@ -117,7 +229,7 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
         DoCastSpellIfCan(m_creature, SPELL_MELT_WEAPON, CAST_TRIGGERED);
     }
 
-    void JustReachedHome()
+    void EnterEvadeMode()
     {
         if (m_pInstance)
             m_pInstance->SetData(TYPE_RAGNAROS, FAIL);
@@ -125,6 +237,8 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
         // Reset flag if had been submerged
         if (m_creature->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE))
             m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+
+        ScriptedAI::EnterEvadeMode();
     }
 
     void SummonedCreatureJustDied(Creature* pSummmoned)
@@ -151,14 +265,63 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
         }
     }
 
+    //void SpellHitTarget(Unit* pTarget, const SpellEntry* pSpell)
+    //{
+    //    // As Majordomo is now killed, the last timer (until attacking) must be handled with ragnaros script
+    //    if (pSpell->Id == SPELL_ELEMENTAL_FIRE_KILL && pTarget->GetTypeId() == TYPEID_UNIT && pTarget->GetEntry() == NPC_MAJORDOMO)
+    //        m_uiEnterCombatTimer = 10000;
+    //}
+
     void UpdateAI(const uint32 uiDiff)
     {
+        if (m_uiEnterCombatTimer)
+        {
+            if (m_uiEnterCombatTimer <=  uiDiff)
+            {
+                if (!m_bHasAggroYelled)
+                {
+                    m_uiEnterCombatTimer = 3000;
+                    m_bHasAggroYelled = true;
+                    DoScriptText(SAY_ARRIVAL5_RAG, m_creature);
+                }
+                else
+                {
+                    m_uiEnterCombatTimer = 0;
+                    // If we don't remove this passive flag, he will be unattackable after evading, this way he will enter combat
+                    m_creature->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_PASSIVE);
+                    if (m_pInstance)
+                    {
+                        if (Player* pPlayer = m_pInstance->GetPlayerInMap(true, false))
+                        {
+                            m_creature->AI()->AttackStart(pPlayer);
+                            return;
+                        }
+                    }
+                }
+            }
+            else
+                m_uiEnterCombatTimer -= uiDiff;
+        }
         // Return since we have no target
         if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
             return;
 
         if (m_bIsSubmerged)
         {
+            // Timer to check when Adds should attack
+            if (m_uiAddFightStartTimer < uiDiff)
+            {
+                for(uint8 i = 0; i < MAX_ADDS_IN_SUBMERGE; ++i)
+                {
+                    if (Creature *pCreature = m_creature->GetMap()->GetCreature(m_uiAdds[i]))
+                        AttackNearestTarget(pCreature);
+                }
+                m_uiAddFightStartTimer = 3000;
+                m_bJustSpawnedAdds = false;
+            }
+            else
+                m_uiAddFightStartTimer -= uiDiff;
+
             // Timer to check when Ragnaros should emerge (is set to soonish, when last add is killed)
             if (m_uiAttackTimer < uiDiff)
             {
@@ -176,21 +339,52 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
             return;
         }
 
+        // Eruption timer
+        if (m_uiEruptionTimer < 1500 && !m_uiEruptionTrigger)
+        {
+            Unit *pUnit = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0);
+            float PosX, PosY, PosZ;
+            pUnit->GetClosePoint(PosX, PosY, PosZ, 0, urand(0, 13), urand(0, 360));
+            Creature *pTrigger = m_creature->SummonCreature(NPC_ERUPTION_TRIGGER, PosX, PosY, PosZ-3, 0, TEMPSUMMON_TIMED_DESPAWN, 2500);
+            pTrigger->setFaction(m_creature->getFaction());
+            pTrigger->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            pTrigger->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            // when waterlvl in mc workes, add this
+            /*for (uint16 i = 45; i <= 360 || pUnit->IsInWater(); i += 45)
+            {
+                pUnit->GetClosePoint(PosX, PosY, PosZ-3, 0, 5, i);
+                pTrigger->NearTeleportTo(PosX, PosY, PosZ, 0);
+                debug_log("position is %f / %f / %f", pTrigger->GetPositionX(), pTrigger->GetPositionY(), pTrigger->GetPositionZ());
+            }*/
+            pTrigger->SummonGameObject(GO_LAVA_SPLASH, pTrigger->GetPositionX(), pTrigger->GetPositionY(), pTrigger->GetPositionZ(), pTrigger->GetOrientation(), TEMPSUMMON_TIMED_DESPAWN, 5000);
+
+            m_uiEruptionTrigger = pTrigger->GetGUID();
+        }
+        else if (m_uiEruptionTimer < uiDiff)
+        {
+            if (m_uiEruptionTrigger)
+            {
+                m_creature->GetMap()->GetCreature(m_uiEruptionTrigger)->CastSpell(m_creature->GetMap()->GetCreature(m_uiEruptionTrigger), SPELL_ERUPTION, true);
+                m_uiEruptionTrigger = NULL;
+            }
+            m_uiEruptionTimer = urand(10000, 15000);
+        }
+        else
+            m_uiEruptionTimer -= uiDiff;
+
         // Wrath Of Ragnaros Timer
         if (m_uiWrathOfRagnarosTimer < uiDiff)
         {
             if (DoCastSpellIfCan(m_creature, SPELL_WRATH_OF_RAGNAROS) == CAST_OK)
             {
-                if (urand(0, 1))
-                    DoScriptText(SAY_WRATH, m_creature);
-
-                m_uiWrathOfRagnarosTimer = 30000;
+                DoScriptText(SAY_WRATH, m_creature);
+                m_uiWrathOfRagnarosTimer = 25000;
             }
         }
         else
             m_uiWrathOfRagnarosTimer -= uiDiff;
 
-        // Elemental FireTimer
+        // Elemental Fire Timer
         if (m_uiElementalFireTimer < uiDiff)
         {
             if (DoCastSpellIfCan(m_creature->getVictim(), SPELL_ELEMENTAL_FIRE) == CAST_OK)
@@ -199,6 +393,39 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
         else
             m_uiElementalFireTimer -= uiDiff;
 
+        // Hammer of Ragnaros
+        if (m_uiHammerTimer < uiDiff)
+        {
+            // Select a target with mana-bar
+            std::list<Unit*> lValidTargets;
+            ThreatList const& tList = m_creature->getThreatManager().getThreatList();
+            for (ThreatList::const_iterator iter = tList.begin(); iter != tList.end(); ++iter)
+            {
+                Unit* pTempTarget = m_creature->GetMap()->GetUnit((*iter)->getUnitGuid());
+                if (pTempTarget && pTempTarget->getPowerType() == POWER_MANA)
+                    lValidTargets.push_back(pTempTarget);
+            }
+
+            if (!lValidTargets.empty())
+            {
+                std::list<Unit*>::const_iterator itr = lValidTargets.begin();
+                advance(itr, urand(0, lValidTargets.size() - 1));
+                //if (DoCastSpellIfCan(*itr, SPELL_MIGHT_OF_RAGNAROS) == CAST_OK)
+                //{
+                //    DoScriptText(SAY_HAMMER, m_creature);
+                //    m_uiHammerTimer = 11000;
+                //}
+                (*itr)->CastSpell(*itr, SPELL_MIGHT_OF_RAGNAROS, true);
+                DoScriptText(SAY_HAMMER, m_creature);
+                m_uiHammerTimer = 11000;
+            }
+            else
+                m_uiHammerTimer = 11000;
+        }
+        else
+            m_uiHammerTimer -= uiDiff;
+
+
         // Submerge Timer
         if (m_uiSubmergeTimer < uiDiff)
         {
@@ -219,8 +446,10 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
             float fX, fY, fZ;
             for(uint8 i = 0; i < MAX_ADDS_IN_SUBMERGE; ++i)
             {
-                m_creature->GetRandomPoint(m_creature->GetPositionX(), m_creature->GetPositionY(), m_creature->GetPositionZ(), 30.0f, fX, fY, fZ);
-                m_creature->SummonCreature(NPC_SON_OF_FLAME, fX, fY, fZ, 0.0f, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 1000);
+                m_creature->GetClosePoint(fX, fY, fZ, 0, urand(30, 50), urand(0, 360));
+                m_uiAdds[i] = m_creature->SummonCreature(NPC_SON_OF_FLAME, fX, fY, fZ, 0.0f, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 5000)->GetGUID();
+                m_creature->GetMap()->GetCreature(m_uiAdds[i])->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_PASSIVE);
+                m_bJustSpawnedAdds = true;
             }
 
             return;
@@ -228,43 +457,11 @@ struct MANGOS_DLL_DECL boss_ragnarosAI : public Scripted_NoMovementAI
         else
             m_uiSubmergeTimer -= uiDiff;
 
-        // TODO this actually should select _any_ enemy in melee range, not only the tank
-        // Range check for melee target, if nobody is found in range, then cast magma blast on random
-        // If we are within range melee the target
         if (m_creature->IsNonMeleeSpellCasted(false) || !m_creature->getVictim())
             return;
 
-        if (m_creature->CanReachWithMeleeAttack(m_creature->getVictim()))
-        {
-            // Make sure our attack is ready
-            if (m_creature->isAttackReady())
-            {
-                m_creature->AttackerStateUpdate(m_creature->getVictim());
-                m_creature->resetAttackTimer();
-                m_bHasYelledMagmaBurst = false;
-            }
-        }
-        else
-        {
-            // Magma Burst Timer
-            if (m_uiMagmaBlastTimer < uiDiff)
-            {
-                if (Unit* pTarget = m_creature->SelectAttackingTarget(ATTACKING_TARGET_RANDOM, 0))
-                {
-                    if (DoCastSpellIfCan(pTarget, SPELL_MAGMA_BLAST) == CAST_OK)
-                    {
-                        if (!m_bHasYelledMagmaBurst)
-                        {
-                            DoScriptText(SAY_MAGMABURST, m_creature);
-                            m_bHasYelledMagmaBurst = true;
-                        }
-                        m_uiMagmaBlastTimer = 1000;          // Spamm this!
-                    }
-                }
-            }
-            else
-                m_uiMagmaBlastTimer -= uiDiff;
-        }
+        if (DoAutoAttack( uiDiff ))
+            m_uiMagmaBlastTimer = 1500;          // Spamm this!;
     }
 };
 
diff --git a/scripts/eastern_kingdoms/molten_core/ragnaros.sql b/scripts/eastern_kingdoms/molten_core/ragnaros.sql
new file mode 100644
--- /dev/null
+++ b/scripts/eastern_kingdoms/molten_core/ragnaros.sql
@@ -0,0 +1 @@
+UPDATE `creature_template` SET  `unit_flags` =  '512', `MovementType` =  '0' WHERE  `creature_template`.`entry` =11502;

